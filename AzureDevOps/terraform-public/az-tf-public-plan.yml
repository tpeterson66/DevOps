steps:
    # Terraform Install    
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: Terraform Install
    inputs:
      terraformVersion: $(terraformVersion)
  # Terraform Init
  - task: TerraformTaskV1@0
    displayName: Terraform Initialization
    inputs:
      provider: 'azurerm'
      command: 'init'
      backendServiceArm: $(serviceConnectionName)
      backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
      backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
      backendAzureRmContainerName: $(backendAzureRmContainerName)
      backendAzureRmKey: $(backendAzureRmKey)
      workingDirectory: $(terraform_working_directory)
  # Terraform Validate
  - task: TerraformTaskV1@0
    displayName: Terraform Validation
    inputs:
      provider: 'azurerm'
      command: 'validate'
      workingDirectory: $(terraform_working_directory)
  # Terraform Plan
  - task: TerraformTaskV1@0
    displayName: Terraform Plan
    inputs:
      provider: 'azurerm'
      command: 'plan'
      commandOptions: '-var backendAzureRmResourceGroupName=$(backendAzureRmResourceGroupName) -var backendAzureRmStorageAccountName=$(backendAzureRmStorageAccountName) -var backendAzureRmContainerName=$(backendAzureRmContainerName) -var backendAzureRmKey=$(backendAzureRmKey)'
      environmentServiceNameAzureRM: $(serviceConnectionName)
      workingDirectory: $(terraform_working_directory)
  # Terraform Apply
  - task: TerraformTaskV1@0
    condition: and(succeeded(), eq(variables.isDevelop, ${{ parameters.deploy }}, true))
    displayName: Terraform Apply
    inputs:
      provider: 'azurerm'
      command: 'apply'
      commandOptions: '-var backendAzureRmResourceGroupName=$(backendAzureRmResourceGroupName) -var backendAzureRmStorageAccountName=$(backendAzureRmStorageAccountName) -var backendAzureRmContainerName=$(backendAzureRmContainerName) -var backendAzureRmKey=$(backendAzureRmKey)'
      environmentServiceNameAzureRM: $(serviceConnectionName)
      workingDirectory: $(terraform_working_directory)
  # Terraform Destroy
  - task: TerraformTaskV1@0
    displayName: Terraform Destroy
    condition: and(succeeded(), eq(variables.isDevelop, ${{ parameters.deploy }}, true))
    inputs:
      provider: 'azurerm'
      command: 'destroy'
      commandOptions: '-var backendAzureRmResourceGroupName=$(backendAzureRmResourceGroupName) -var backendAzureRmStorageAccountName=$(backendAzureRmStorageAccountName) -var backendAzureRmContainerName=$(backendAzureRmContainerName) -var backendAzureRmKey=$(backendAzureRmKey)'
      environmentServiceNameAzureRM: $(serviceConnectionName)
      workingDirectory: $(terraform_working_directory)